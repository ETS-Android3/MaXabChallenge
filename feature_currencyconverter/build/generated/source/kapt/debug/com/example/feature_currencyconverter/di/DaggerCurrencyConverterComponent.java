// Generated by Dagger (https://dagger.dev).
package com.example.feature_currencyconverter.di;

import android.app.Application;
import android.content.Context;
import com.example.core.base.presentation.activity.BaseActivity;
import com.example.core.base.presentation.navigation.NavManager_Factory;
import com.example.core.di.ViewModelFactory;
import com.example.core.di.component.BaseComponent;
import com.example.core.di.module.BaseModule;
import com.example.core.di.module.BaseModule_ProvideContextFactory;
import com.example.core.di.module.BaseModule_ProvideHttpClient$core_debugFactory;
import com.example.core.di.module.BaseModule_ProvideRetrofitBuilderFactory;
import com.example.feature_currencyconverter.data.local.CountriesDao;
import com.example.feature_currencyconverter.data.local.CurrencyConverterDatabase;
import com.example.feature_currencyconverter.data.remote.service.CountriesAPIService;
import com.example.feature_currencyconverter.domain.repository.CurrenciesRepository;
import com.example.feature_currencyconverter.domain.usecase.GetCurrenciesUseCase;
import com.example.feature_currencyconverter.domain.usecase.GetCurrenciesUseCase_Factory;
import com.example.feature_currencyconverter.presentation.currencies.di.CurrenciesFragmentBuilderModule_ProvideCurrenciesFragment;
import com.example.feature_currencyconverter.presentation.currencies.di.CurrenciesModule;
import com.example.feature_currencyconverter.presentation.currencies.di.CurrenciesModule_ProvideAlbumDao$feature_currencyconverter_debugFactory;
import com.example.feature_currencyconverter.presentation.currencies.di.CurrenciesModule_ProvideAlbumRepository$feature_currencyconverter_debugFactory;
import com.example.feature_currencyconverter.presentation.currencies.di.CurrenciesModule_ProvideCountriesAPIService$feature_currencyconverter_debugFactory;
import com.example.feature_currencyconverter.presentation.currencies.di.CurrenciesModule_ProvideCurrencyConverterDatabase$feature_currencyconverter_debugFactory;
import com.example.feature_currencyconverter.presentation.currencies.ui.fragment.CurrenciesFragment;
import com.example.feature_currencyconverter.presentation.currencies.ui.fragment.CurrenciesFragment_MembersInjector;
import com.example.feature_currencyconverter.presentation.currencies.viewmodel.CurrenciesViewModel;
import com.example.feature_currencyconverter.presentation.currencies.viewmodel.CurrenciesViewModel_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerCurrencyConverterComponent implements CurrencyConverterComponent {
  private final DaggerCurrencyConverterComponent currencyConverterComponent = this;

  private Provider<CurrenciesFragmentBuilderModule_ProvideCurrenciesFragment.CurrenciesFragmentSubcomponent.Factory> currenciesFragmentSubcomponentFactoryProvider;

  private Provider<OkHttpClient> provideHttpClient$core_debugProvider;

  private Provider<Retrofit.Builder> provideRetrofitBuilderProvider;

  private Provider<Application> applicationProvider;

  private Provider<Context> provideContextProvider;

  private DaggerCurrencyConverterComponent(BaseModule baseModuleParam,
      BaseComponent baseComponentParam, Application applicationParam) {

    initialize(baseModuleParam, baseComponentParam, applicationParam);

  }

  public static CurrencyConverterComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(CurrenciesFragment.class, (Provider) currenciesFragmentSubcomponentFactoryProvider);
  }

  private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final BaseModule baseModuleParam, final BaseComponent baseComponentParam,
      final Application applicationParam) {
    this.currenciesFragmentSubcomponentFactoryProvider = new Provider<CurrenciesFragmentBuilderModule_ProvideCurrenciesFragment.CurrenciesFragmentSubcomponent.Factory>() {
      @Override
      public CurrenciesFragmentBuilderModule_ProvideCurrenciesFragment.CurrenciesFragmentSubcomponent.Factory get(
          ) {
        return new CurrenciesFragmentSubcomponentFactory(currencyConverterComponent);
      }
    };
    this.provideHttpClient$core_debugProvider = BaseModule_ProvideHttpClient$core_debugFactory.create(baseModuleParam);
    this.provideRetrofitBuilderProvider = BaseModule_ProvideRetrofitBuilderFactory.create(baseModuleParam, provideHttpClient$core_debugProvider);
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideContextProvider = BaseModule_ProvideContextFactory.create(baseModuleParam, applicationProvider);
  }

  @Override
  public void inject(BaseActivity fragment) {
    injectBaseActivity(fragment);
  }

  private BaseActivity injectBaseActivity(BaseActivity instance) {
    DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements CurrencyConverterComponent.Builder {
    private Application application;

    private BaseComponent baseComponent;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public Builder baseComponent(BaseComponent component) {
      this.baseComponent = Preconditions.checkNotNull(component);
      return this;
    }

    @Override
    public CurrencyConverterComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      Preconditions.checkBuilderRequirement(baseComponent, BaseComponent.class);
      return new DaggerCurrencyConverterComponent(new BaseModule(), baseComponent, application);
    }
  }

  private static final class CurrenciesFragmentSubcomponentFactory implements CurrenciesFragmentBuilderModule_ProvideCurrenciesFragment.CurrenciesFragmentSubcomponent.Factory {
    private final DaggerCurrencyConverterComponent currencyConverterComponent;

    private CurrenciesFragmentSubcomponentFactory(
        DaggerCurrencyConverterComponent currencyConverterComponent) {
      this.currencyConverterComponent = currencyConverterComponent;
    }

    @Override
    public CurrenciesFragmentBuilderModule_ProvideCurrenciesFragment.CurrenciesFragmentSubcomponent create(
        CurrenciesFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new CurrenciesFragmentSubcomponentImpl(currencyConverterComponent, new CurrenciesModule(), arg0);
    }
  }

  private static final class CurrenciesFragmentSubcomponentImpl implements CurrenciesFragmentBuilderModule_ProvideCurrenciesFragment.CurrenciesFragmentSubcomponent {
    private final DaggerCurrencyConverterComponent currencyConverterComponent;

    private final CurrenciesFragmentSubcomponentImpl currenciesFragmentSubcomponentImpl = this;

    private Provider<CountriesAPIService> provideCountriesAPIService$feature_currencyconverter_debugProvider;

    private Provider<CurrencyConverterDatabase> provideCurrencyConverterDatabase$feature_currencyconverter_debugProvider;

    private Provider<CountriesDao> provideAlbumDao$feature_currencyconverter_debugProvider;

    private Provider<CurrenciesRepository> provideAlbumRepository$feature_currencyconverter_debugProvider;

    private Provider<GetCurrenciesUseCase> getCurrenciesUseCaseProvider;

    private Provider<CurrenciesViewModel> currenciesViewModelProvider;

    private CurrenciesFragmentSubcomponentImpl(
        DaggerCurrencyConverterComponent currencyConverterComponent,
        CurrenciesModule currenciesModuleParam, CurrenciesFragment arg0Param) {
      this.currencyConverterComponent = currencyConverterComponent;

      initialize(currenciesModuleParam, arg0Param);

    }

    private ViewModelFactory<CurrenciesViewModel> viewModelFactoryOfCurrenciesViewModel() {
      return new ViewModelFactory<CurrenciesViewModel>(DoubleCheck.lazy(currenciesViewModelProvider));
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CurrenciesModule currenciesModuleParam,
        final CurrenciesFragment arg0Param) {
      this.provideCountriesAPIService$feature_currencyconverter_debugProvider = CurrenciesModule_ProvideCountriesAPIService$feature_currencyconverter_debugFactory.create(currenciesModuleParam, currencyConverterComponent.provideRetrofitBuilderProvider);
      this.provideCurrencyConverterDatabase$feature_currencyconverter_debugProvider = CurrenciesModule_ProvideCurrencyConverterDatabase$feature_currencyconverter_debugFactory.create(currenciesModuleParam, currencyConverterComponent.provideContextProvider);
      this.provideAlbumDao$feature_currencyconverter_debugProvider = CurrenciesModule_ProvideAlbumDao$feature_currencyconverter_debugFactory.create(currenciesModuleParam, provideCurrencyConverterDatabase$feature_currencyconverter_debugProvider);
      this.provideAlbumRepository$feature_currencyconverter_debugProvider = CurrenciesModule_ProvideAlbumRepository$feature_currencyconverter_debugFactory.create(currenciesModuleParam, provideCountriesAPIService$feature_currencyconverter_debugProvider, provideAlbumDao$feature_currencyconverter_debugProvider);
      this.getCurrenciesUseCaseProvider = GetCurrenciesUseCase_Factory.create(provideAlbumRepository$feature_currencyconverter_debugProvider);
      this.currenciesViewModelProvider = CurrenciesViewModel_Factory.create(NavManager_Factory.create(), getCurrenciesUseCaseProvider);
    }

    @Override
    public void inject(CurrenciesFragment arg0) {
      injectCurrenciesFragment(arg0);
    }

    private CurrenciesFragment injectCurrenciesFragment(CurrenciesFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, currencyConverterComponent.dispatchingAndroidInjectorOfObject());
      CurrenciesFragment_MembersInjector.injectCurrenciesViewModelFactory(instance, viewModelFactoryOfCurrenciesViewModel());
      return instance;
    }
  }
}
