// Generated by Dagger (https://dagger.dev).
package com.example.feature_currencyconverter.presentation.currencies.viewmodel;

import com.example.core.base.presentation.navigation.NavManager;
import com.example.feature_currencyconverter.domain.usecase.GetCurrenciesUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CurrenciesViewModel_Factory implements Factory<CurrenciesViewModel> {
  private final Provider<NavManager> navManagerProvider;

  private final Provider<GetCurrenciesUseCase> getCurrenciesUseCaseProvider;

  public CurrenciesViewModel_Factory(Provider<NavManager> navManagerProvider,
      Provider<GetCurrenciesUseCase> getCurrenciesUseCaseProvider) {
    this.navManagerProvider = navManagerProvider;
    this.getCurrenciesUseCaseProvider = getCurrenciesUseCaseProvider;
  }

  @Override
  public CurrenciesViewModel get() {
    return newInstance(navManagerProvider.get(), getCurrenciesUseCaseProvider.get());
  }

  public static CurrenciesViewModel_Factory create(Provider<NavManager> navManagerProvider,
      Provider<GetCurrenciesUseCase> getCurrenciesUseCaseProvider) {
    return new CurrenciesViewModel_Factory(navManagerProvider, getCurrenciesUseCaseProvider);
  }

  public static CurrenciesViewModel newInstance(NavManager navManager,
      GetCurrenciesUseCase getCurrenciesUseCase) {
    return new CurrenciesViewModel(navManager, getCurrenciesUseCase);
  }
}
