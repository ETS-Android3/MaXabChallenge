// Generated by Dagger (https://dagger.dev).
package com.example.feature_currencyconverter.presentation.currencies.viewmodel;

import com.example.feature_currencyconverter.domain.usecase.GetBaseCurrencyUseCase;
import com.example.feature_currencyconverter.domain.usecase.GetCurrenciesUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CurrenciesViewModel_Factory implements Factory<CurrenciesViewModel> {
  private final Provider<GetCurrenciesUseCase> getCurrenciesUseCaseProvider;

  private final Provider<GetBaseCurrencyUseCase> getBaseCurrencyUseCaseProvider;

  public CurrenciesViewModel_Factory(Provider<GetCurrenciesUseCase> getCurrenciesUseCaseProvider,
      Provider<GetBaseCurrencyUseCase> getBaseCurrencyUseCaseProvider) {
    this.getCurrenciesUseCaseProvider = getCurrenciesUseCaseProvider;
    this.getBaseCurrencyUseCaseProvider = getBaseCurrencyUseCaseProvider;
  }

  @Override
  public CurrenciesViewModel get() {
    return newInstance(getCurrenciesUseCaseProvider.get(), getBaseCurrencyUseCaseProvider.get());
  }

  public static CurrenciesViewModel_Factory create(
      Provider<GetCurrenciesUseCase> getCurrenciesUseCaseProvider,
      Provider<GetBaseCurrencyUseCase> getBaseCurrencyUseCaseProvider) {
    return new CurrenciesViewModel_Factory(getCurrenciesUseCaseProvider, getBaseCurrencyUseCaseProvider);
  }

  public static CurrenciesViewModel newInstance(GetCurrenciesUseCase getCurrenciesUseCase,
      GetBaseCurrencyUseCase getBaseCurrencyUseCase) {
    return new CurrenciesViewModel(getCurrenciesUseCase, getBaseCurrencyUseCase);
  }
}
