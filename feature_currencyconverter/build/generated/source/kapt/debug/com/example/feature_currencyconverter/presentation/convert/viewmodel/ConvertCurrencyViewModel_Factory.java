// Generated by Dagger (https://dagger.dev).
package com.example.feature_currencyconverter.presentation.convert.viewmodel;

import com.example.feature_currencyconverter.domain.usecase.ConvertCurrencyUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ConvertCurrencyViewModel_Factory implements Factory<ConvertCurrencyViewModel> {
  private final Provider<ConvertCurrencyUseCase> convertCurrencyUseCaseProvider;

  public ConvertCurrencyViewModel_Factory(
      Provider<ConvertCurrencyUseCase> convertCurrencyUseCaseProvider) {
    this.convertCurrencyUseCaseProvider = convertCurrencyUseCaseProvider;
  }

  @Override
  public ConvertCurrencyViewModel get() {
    return newInstance(convertCurrencyUseCaseProvider.get());
  }

  public static ConvertCurrencyViewModel_Factory create(
      Provider<ConvertCurrencyUseCase> convertCurrencyUseCaseProvider) {
    return new ConvertCurrencyViewModel_Factory(convertCurrencyUseCaseProvider);
  }

  public static ConvertCurrencyViewModel newInstance(
      ConvertCurrencyUseCase convertCurrencyUseCase) {
    return new ConvertCurrencyViewModel(convertCurrencyUseCase);
  }
}
