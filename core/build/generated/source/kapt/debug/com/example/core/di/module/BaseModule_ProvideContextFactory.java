// Generated by Dagger (https://dagger.dev).
package com.example.core.di.module;

import android.app.Application;
import android.content.Context;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class BaseModule_ProvideContextFactory implements Factory<Context> {
  private final BaseModule module;

  private final Provider<Application> applicationProvider;

  public BaseModule_ProvideContextFactory(BaseModule module,
      Provider<Application> applicationProvider) {
    this.module = module;
    this.applicationProvider = applicationProvider;
  }

  @Override
  public Context get() {
    return provideContext(module, applicationProvider.get());
  }

  public static BaseModule_ProvideContextFactory create(BaseModule module,
      Provider<Application> applicationProvider) {
    return new BaseModule_ProvideContextFactory(module, applicationProvider);
  }

  public static Context provideContext(BaseModule instance, Application application) {
    return Preconditions.checkNotNullFromProvides(instance.provideContext(application));
  }
}
