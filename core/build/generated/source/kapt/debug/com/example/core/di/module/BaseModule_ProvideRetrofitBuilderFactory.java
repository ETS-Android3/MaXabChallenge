// Generated by Dagger (https://dagger.dev).
package com.example.core.di.module;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class BaseModule_ProvideRetrofitBuilderFactory implements Factory<Retrofit.Builder> {
  private final BaseModule module;

  private final Provider<OkHttpClient> httpClientProvider;

  public BaseModule_ProvideRetrofitBuilderFactory(BaseModule module,
      Provider<OkHttpClient> httpClientProvider) {
    this.module = module;
    this.httpClientProvider = httpClientProvider;
  }

  @Override
  public Retrofit.Builder get() {
    return provideRetrofitBuilder(module, httpClientProvider.get());
  }

  public static BaseModule_ProvideRetrofitBuilderFactory create(BaseModule module,
      Provider<OkHttpClient> httpClientProvider) {
    return new BaseModule_ProvideRetrofitBuilderFactory(module, httpClientProvider);
  }

  public static Retrofit.Builder provideRetrofitBuilder(BaseModule instance,
      OkHttpClient httpClient) {
    return Preconditions.checkNotNullFromProvides(instance.provideRetrofitBuilder(httpClient));
  }
}
